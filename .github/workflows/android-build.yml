name: 🤖 Android CI (Capacitor) – Build APK & AAB

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type (debug or release)"
        required: true
        default: "debug"
        type: choice
        options:
          - debug
          - release

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: 34
  ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
  ANDROID_TARGET_SDK: 34
  APP_ID: uk.co.armora.client
  APP_NAME: "Armora Security Transport"
  WEB_DIR: build

jobs:
  prepare:
    name: 📦 Prepare Capacitor Project
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.set-build-type.outputs.build_type }}
    steps:
      - name: 🔍 Set build type
        id: set-build-type
        run: |
          if [ -n "${{ github.event.inputs.build_type }}" ]; then
            echo "build_type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
          else
            echo "build_type=debug" >> $GITHUB_OUTPUT
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install deps
        run: npm ci

      - name: ➕ Install Capacitor Android
        run: |
          npm i -D @capacitor/cli
          npm i @capacitor/core @capacitor/android

      - name: 🏗️ Build Web App
        run: npm run build
        env:
          CI: false
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ secrets.REACT_APP_STRIPE_PUBLISHABLE_KEY }}
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}
          REACT_APP_SENTRY_DSN: ${{ secrets.REACT_APP_SENTRY_DSN }}

      - name: ⚙️ Ensure Capacitor Config
        run: |
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ]; then
            npx cap init "${APP_NAME}" "${APP_ID}" --web-dir=${WEB_DIR} --npm-client=npm
          else
            echo "Capacitor config present."
          fi

      - name: ➕ Add / Sync Android Platform
        run: |
          if [ ! -d android ]; then
            npx cap add android
          else
            npx cap sync android
          fi

      - name: 🧩 Prepare Android Gradle Patch
        run: |
          if [ -f scripts/prepare-android-ci.sh ]; then
            bash scripts/prepare-android-ci.sh
          else
            echo "No prepare script found (will be added)."
          fi

      - name: 📤 Upload Prepared Android Project
        uses: actions/upload-artifact@v4
        with:
          name: android-prepared
          path: android
          retention-days: 7

  build:
    name: 🏗️ Build (${{ needs.prepare.outputs.build_type }})
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: 📦 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

      - name: 📥 Download Android Project
        uses: actions/download-artifact@v4
        with:
          name: android-prepared
          path: android

      - name: 🔧 Gradle Executable
        run: chmod +x android/gradlew

      - name: 🧪 Validate Repositories
        run: |
          grep -q "google()" android/build.gradle || echo "WARNING: google() not found in root build.gradle"
          grep -q "mavenCentral()" android/build.gradle || echo "WARNING: mavenCentral() not found"

      - name: 🔐 Configure Signing (if secrets exist)
        if: secrets.ANDROID_KEYSTORE_BASE64 && secrets.ANDROID_KEYSTORE_PASSWORD && secrets.ANDROID_KEY_ALIAS && secrets.ANDROID_KEY_PASSWORD
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
          cat >> android/gradle.properties <<EOF

RELEASE_STORE_FILE=keystore.jks
RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
EOF
          echo "Applied signing config."

      - name: 🏗️ Gradle Build
        id: gradle-build
        run: |
          cd android
          if [ "${{ needs.prepare.outputs.build_type }}" = "release" ]; then
            ./gradlew bundleRelease --stacktrace || (echo "::error ::Release build failed"; exit 1)
          else
            ./gradlew assembleDebug --stacktrace || (echo "::error ::Debug build failed"; exit 1)
          fi

      - name: 📤 Upload Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.build_type == 'release' && 'armora-release-aab' || 'armora-debug-apk' }}
          path: |
            android/app/build/outputs/**/*.aab
            android/app/build/outputs/**/*.apk
          retention-days: 30

      - name: 📝 Summary
        if: always()
        run: |
          echo "## Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ needs.prepare.outputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
            echo "- Artifact: $( [ '${{ needs.prepare.outputs.build_type }}' = 'release' ] && echo 'armora-release-aab' || echo 'armora-debug-apk')" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Download artifact" >> $GITHUB_STEP_SUMMARY
            echo "2. Test on device (APK for debug)" >> $GITHUB_STEP_SUMMARY
            echo "3. Upload AAB to Play Console (release)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting Handoff to Copilot" >> $GITHUB_STEP_SUMMARY
            echo "Copy the prompt below into Copilot Chat in this repo:" >> $GITHUB_STEP_SUMMARY
            echo '\n```
@copilot Please inspect the last failed Android build logs in this workflow run and propose concrete changes (Gradle plugin versions / repositories / missing plugins) to achieve a successful assembleDebug and bundleRelease.\n``\n' >> $GITHUB_STEP_SUMMARY
