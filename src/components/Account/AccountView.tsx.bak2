import React, { useState, useEffect } from 'react';
import { useApp } from '../../contexts/AppContext';
import { ProfileHeader } from './ProfileHeader';
// import { SecurityCenter } from './SecurityCenter';
// import { FinancialDashboard } from './FinancialDashboard';
// import { ReferralProgram } from './ReferralProgram';
// import { PreferencesManager } from './PreferencesManager';
// import { RideHistory } from './RideHistory';
// import { SupportHub } from './SupportHub';
// import { MembershipBenefits } from './MembershipBenefits';
import styles from './AccountView.module.css';

type AccountTab = 'overview' | 'security' | 'financial' | 'referrals' | 'preferences' | 'history' | 'support' | 'membership';

interface UserAccountData {
  profile: {
    id: string;
    name: string;
    email: string;
    phone: string;
    avatar: string;
    memberSince: Date;
    tier: 'standard' | 'executive' | 'shadow';
    verificationStatus: {
      email: boolean;
      phone: boolean;
      identity: boolean;
      background: boolean;
    };
  };
  security: {
    twoFactorEnabled: boolean;
    trustedContacts: any[];
    panicButtonEnabled: boolean;
    loginSessions: any[];
    privacySettings: any;
  };
  analytics: {
    safetyScore: number;
    totalRides: number;
    totalHours: number;
    carbonSaved: number;
    favoriteRoutes: string[];
  };
  financial: {
    credits: number;
    totalSpent: number;
    monthlySpend: number[];
    paymentMethods: any[];
    subscription: any;
  };
}

// Mock data generator
const generateMockUserData = (user: any): UserAccountData => {
  return {
    profile: {
      id: user?.id || 'user-123',
      name: user?.name || 'John Smith',
      email: user?.email || 'john.smith@example.com',
      phone: '+44 7700 900123',
      avatar: '/api/placeholder/150/150',
      memberSince: new Date('2023-06-15'),
      tier: user?.userType === 'registered' ? 'executive' : 'standard',
      verificationStatus: {
        email: true,
        phone: true,
        identity: user?.userType !== 'guest',
        background: user?.userType === 'registered'
      }
    },
    security: {
      twoFactorEnabled: false,
      trustedContacts: [],
      panicButtonEnabled: true,
      loginSessions: [
        { device: 'iPhone 14 Pro', location: 'London, UK', lastActive: 'Active now' },
        { device: 'MacBook Pro', location: 'London, UK', lastActive: '2 hours ago' }
      ],
      privacySettings: {}
    },
    analytics: {
      safetyScore: 94,
      totalRides: 47,
      totalHours: 156,
      carbonSaved: 23.4,
      favoriteRoutes: ['Home → Heathrow', 'Office → Client Meeting', 'Home → Westminster']
    },
    financial: {
      credits: 12.50,
      totalSpent: 2847.50,
      monthlySpend: [245, 167, 289, 445, 234, 356, 267, 189, 378, 290, 156, 234],
      paymentMethods: [
        { id: '1', type: 'card', last4: '4242', brand: 'visa', isDefault: true },
        { id: '2', type: 'card', last4: '8888', brand: 'mastercard', isDefault: false }
      ],
      subscription: {
        plan: 'Executive Monthly',
        status: 'active',
        nextBilling: new Date('2024-02-15'),
        amount: 75
      }
    }
  };
};

export function AccountView() {
  const { state } = useApp();
  const { user } = state;
  const [activeTab, setActiveTab] = useState<AccountTab>('overview');
  const [userData, setUserData] = useState<UserAccountData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Initialize user data
  useEffect(() => {
    if (user) {
      const mockData = generateMockUserData(user);
      setUserData(mockData);
      setIsLoading(false);
    }
  }, [user]);

  const accountTabs = [
    { id: 'overview', label: 'Overview', icon: '🏠' },
    { id: 'security', label: 'Security', icon: '🔒' },
    { id: 'financial', label: 'Financial', icon: '💳' },
    { id: 'referrals', label: 'Referrals', icon: '🎁' },
    { id: 'preferences', label: 'Preferences', icon: '⚙️' },
    { id: 'history', label: 'History', icon: '📊' },
    { id: 'support', label: 'Support', icon: '🆘' },
    { id: 'membership', label: 'Membership', icon: '⭐' }
  ] as const;

  if (isLoading || !userData) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loadingSpinner}></div>
        <p className={styles.loadingText}>Loading your account...</p>
      </div>
    );
  }

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className={styles.overviewContent}>
            <ProfileHeader userData={userData} />
            <div className={styles.overviewGrid}>
              {/* <SecurityCenter userData={userData} isCompact />
              <FinancialDashboard userData={userData} isCompact />
              <ReferralProgram userData={userData} isCompact /> */}
            </div>
          </div>
        );
      case 'security':
        return <div>Security Center - Coming Soon</div>;
      case 'financial':
        return <div>Financial Dashboard - Coming Soon</div>;
      case 'referrals':
        return <div>Referral Program - Coming Soon</div>;
      case 'preferences':
        return <div>Preferences Manager - Coming Soon</div>;
      case 'history':
        return <div>Ride History - Coming Soon</div>;
      case 'support':
        return <div>Support Hub - Coming Soon</div>;
      case 'membership':
        return <div>Membership Benefits - Coming Soon</div>;
      default:
        return null;
    }
  };

  return (
    <div className={styles.accountContainer}>
      {/* Animated Background */}
      <div className={styles.backgroundPattern}></div>

      {/* Navigation Tabs */}
      <div className={styles.tabsContainer}>
        <div className={styles.tabsWrapper}>
          {accountTabs.map((tab) => (
            <button
              key={tab.id}
              className={`${styles.tab} ${activeTab === tab.id ? styles.activeTab : ''}`}
              onClick={() => setActiveTab(tab.id as AccountTab)}
            >
              <span className={styles.tabIcon}>{tab.icon}</span>
              <span className={styles.tabLabel}>{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Content Area */}
      <div className={styles.contentArea}>
        {renderTabContent()}
      </div>

      {/* Emergency Quick Access */}
      <div className={styles.emergencyQuickAccess}>
        <button className={styles.panicButton}>
          <span className={styles.panicIcon}>🚨</span>
          <span className={styles.panicText}>Emergency</span>
        </button>
        <a href="tel:+442071234567" className={styles.emergencyCall}>
          <span className={styles.callIcon}>📞</span>
          <span className={styles.callText}>24/7 Support</span>
        </a>
      </div>
    </div>
  );
}